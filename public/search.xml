<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>code_test</title>
    <url>/2022/12/15/code-test/</url>
    <content><![CDATA[<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Code test&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo g; hexo s</span></span><br></pre></td></tr></table></figure></div>]]></content>
  </entry>
  <entry>
    <title>博客搭建</title>
    <url>/2022/12/15/first_blog/</url>
    <content><![CDATA[<p>以前搭建过博客和Onedrive资源站。资源站是一键式搭建的，但博客是用一个静态网页完全自己手动编辑的，当时不懂博客框架这种东西。这次搭博客我选择用Github+Hexo搭建。域名暂时懒得买了，就用Github Page凑合下。</p>
<p>都是照着教程来的，过程没什么写的，这里简单写一下遇到的坑。</p>
<h2 id="WSL与Windows共用PATH"><a href="#WSL与Windows共用PATH" class="headerlink" title="WSL与Windows共用PATH"></a>WSL与Windows共用PATH</h2><p>安装Nodejs时发现的，因为我Windows和WSL里都装了Nodejs，而WSL的$PATH中居然包含Windows的PATH，导致我在WSL中无法正常运行npm。不是很理解这种机制到底有什么意义。</p>
<p>解决方案：编辑&#x2F;etc&#x2F;wsl.conf，添加如下字段</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">[interop]</span><br><span class="line">appendWindowsPath=false</span><br></pre></td></tr></table></figure></div>

<p>然后管理员运行PowerShell，执行如下命令以重启WSL</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">net stop LxssManager; net start LxssManager</span></span><br></pre></td></tr></table></figure></div>

<h2 id="Live2D"><a href="#Live2D" class="headerlink" title="Live2D"></a>Live2D</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post_imgs/xtxnbj.jpg"
                     
                ></p>
<p>在电脑端访问我的博客，会加载一个Live2D小人。这玩意儿我很早以前在第一个博客里放过，但是当时完全是静态Html，直接引用一条js即可。现在我使用Hexo，页面是根据主题自动生成的，如何插入js？</p>
<p>主题生成页面时肯定有某些规则文件。研究了一番，发现是在主题根目录的layout文件夹中(仅对于我的主题”redefine”而言)，里面有很多ejs文件，记录了生成页面的规则。找到script.ejs文件添加了js即可。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/post_imgs/live2djs.jpg"
                     
                ></p>
<p>我当年弄网页Live2D就是想要放上血小板那个模型，但当年怎么都找不到，而且技术也不过关。现在看来，这个Live2D接口要自己搭后端，否则就只能用别人的老接口，用现有的模型。最近期末了比较忙没时间整了，先挖个坑以后来填。</p>
<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>代码块的默认字体太丑了，换成Consolas了，也是靠修改主题文件中的highlight.styl配置，把font-family参数全部修改。</p>
<p>Mozilla还有个页面可以在线调试字体配置：<a class="link"   href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-family" >https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-family<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="网站源码"><a href="#网站源码" class="headerlink" title="网站源码"></a>网站源码</h2><p>和我想的不一样，网页的部署是Hexo自动完成的，生成的网页和源码完全是两回事，所以还需要新开一个仓库来保存源码。但是感觉好麻烦，每次都要执行好几次命令，而且我node_module放在项目文件夹里的，git扫描要挺久的。后续想尝试下用Action，push源码后自动运行Hexo生成网页。</p>
<h2 id="Github-Action-自动布署-Hexo"><a href="#Github-Action-自动布署-Hexo" class="headerlink" title="Github Action 自动布署 Hexo"></a>Github Action 自动布署 Hexo</h2><p>参考了这篇文章：<a class="link"   href="https://zhuanlan.zhihu.com/p/170563000" >https://zhuanlan.zhihu.com/p/170563000<i class="fas fa-external-link-alt"></i></a></p>
<p>简单说一下结构。我上传的源码中包含NodeModule和Hexo文件，所以在Action中直接用命令行调用即可。Hexo依赖Git来推送布署网站，所以要生成一对密钥给Git用。当我push源码到仓库时，workflow被触发，在云端Action上clone我的网站源码并执行Hexo，这样就能更新我的网站了。</p>
<p>还有个坑没搞明白，Action上运行Hexo布署网站后，仓库的git log只剩两条了，而我在本地布署并不会这样，猜测和clone –depth&#x3D;1有关。</p>
<p>后续待更新</p>
]]></content>
  </entry>
</search>
